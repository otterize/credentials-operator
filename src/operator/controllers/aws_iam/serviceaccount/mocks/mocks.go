// Code generated by MockGen. DO NOT EDIT.
// Source: serviceaccount_controller.go

// Package mock_serviceaccount is a generated GoMock package.
package mock_serviceaccount

import (
	context "context"
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/iam/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAWSRolePolicyManager is a mock of AWSRolePolicyManager interface.
type MockAWSRolePolicyManager struct {
	ctrl     *gomock.Controller
	recorder *MockAWSRolePolicyManagerMockRecorder
}

// MockAWSRolePolicyManagerMockRecorder is the mock recorder for MockAWSRolePolicyManager.
type MockAWSRolePolicyManagerMockRecorder struct {
	mock *MockAWSRolePolicyManager
}

// NewMockAWSRolePolicyManager creates a new mock instance.
func NewMockAWSRolePolicyManager(ctrl *gomock.Controller) *MockAWSRolePolicyManager {
	mock := &MockAWSRolePolicyManager{ctrl: ctrl}
	mock.recorder = &MockAWSRolePolicyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSRolePolicyManager) EXPECT() *MockAWSRolePolicyManagerMockRecorder {
	return m.recorder
}

// CreateOtterizeIAMRole mocks base method.
func (m *MockAWSRolePolicyManager) CreateOtterizeIAMRole(ctx context.Context, namespace, name string) (*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtterizeIAMRole", ctx, namespace, name)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOtterizeIAMRole indicates an expected call of CreateOtterizeIAMRole.
func (mr *MockAWSRolePolicyManagerMockRecorder) CreateOtterizeIAMRole(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtterizeIAMRole", reflect.TypeOf((*MockAWSRolePolicyManager)(nil).CreateOtterizeIAMRole), ctx, namespace, name)
}

// DeleteOtterizeIAMRole mocks base method.
func (m *MockAWSRolePolicyManager) DeleteOtterizeIAMRole(ctx context.Context, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOtterizeIAMRole", ctx, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOtterizeIAMRole indicates an expected call of DeleteOtterizeIAMRole.
func (mr *MockAWSRolePolicyManagerMockRecorder) DeleteOtterizeIAMRole(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOtterizeIAMRole", reflect.TypeOf((*MockAWSRolePolicyManager)(nil).DeleteOtterizeIAMRole), ctx, namespace, name)
}

// GenerateRoleARN mocks base method.
func (m *MockAWSRolePolicyManager) GenerateRoleARN(namespace, name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRoleARN", namespace, name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRoleARN indicates an expected call of GenerateRoleARN.
func (mr *MockAWSRolePolicyManagerMockRecorder) GenerateRoleARN(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRoleARN", reflect.TypeOf((*MockAWSRolePolicyManager)(nil).GenerateRoleARN), namespace, name)
}

// GetOtterizeRole mocks base method.
func (m *MockAWSRolePolicyManager) GetOtterizeRole(ctx context.Context, namespaceName, accountName string) (bool, *types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtterizeRole", ctx, namespaceName, accountName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*types.Role)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOtterizeRole indicates an expected call of GetOtterizeRole.
func (mr *MockAWSRolePolicyManagerMockRecorder) GetOtterizeRole(ctx, namespaceName, accountName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtterizeRole", reflect.TypeOf((*MockAWSRolePolicyManager)(nil).GetOtterizeRole), ctx, namespaceName, accountName)
}
