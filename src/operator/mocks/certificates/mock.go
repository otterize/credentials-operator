// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/secrets/manager.go

// Package mock_certificates is a generated GoMock package.
package mock_certificates

import (
	context "context"
	"github.com/otterize/spire-integration-operator/src/controllers/secrets/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertificateDataGenerator is a mock of CertificateDataGenerator interface.
type MockCertificateDataGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateDataGeneratorMockRecorder
}

// MockCertificateDataGeneratorMockRecorder is the mock recorder for MockCertificateDataGenerator.
type MockCertificateDataGeneratorMockRecorder struct {
	mock *MockCertificateDataGenerator
}

// NewMockCertificateDataGenerator creates a new mock instance.
func NewMockCertificateDataGenerator(ctrl *gomock.Controller) *MockCertificateDataGenerator {
	mock := &MockCertificateDataGenerator{ctrl: ctrl}
	mock.recorder = &MockCertificateDataGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateDataGenerator) EXPECT() *MockCertificateDataGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockCertificateDataGenerator) Generate(ctx context.Context, config secretstypes.SecretConfig) (secretstypes.CertificateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, config)
	ret0, _ := ret[0].(secretstypes.CertificateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockCertificateDataGeneratorMockRecorder) Generate(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCertificateDataGenerator)(nil).Generate), ctx, config)
}
