// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/gcp_iam/gcp_service_accounts/gcp_service_accounts_controller.go

// Package gcp_service_accounts is a generated GoMock package.
package gcp_service_accounts

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGCPServiceAccountManager is a mock of GCPServiceAccountManager interface.
type MockGCPServiceAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockGCPServiceAccountManagerMockRecorder
}

// MockGCPServiceAccountManagerMockRecorder is the mock recorder for MockGCPServiceAccountManager.
type MockGCPServiceAccountManagerMockRecorder struct {
	mock *MockGCPServiceAccountManager
}

// NewMockGCPServiceAccountManager creates a new mock instance.
func NewMockGCPServiceAccountManager(ctrl *gomock.Controller) *MockGCPServiceAccountManager {
	mock := &MockGCPServiceAccountManager{ctrl: ctrl}
	mock.recorder = &MockGCPServiceAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGCPServiceAccountManager) EXPECT() *MockGCPServiceAccountManagerMockRecorder {
	return m.recorder
}

// AnnotateGKENamespace mocks base method.
func (m *MockGCPServiceAccountManager) AnnotateGKENamespace(ctx context.Context, namespaceName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnotateGKENamespace", ctx, namespaceName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnnotateGKENamespace indicates an expected call of AnnotateGKENamespace.
func (mr *MockGCPServiceAccountManagerMockRecorder) AnnotateGKENamespace(ctx, namespaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnotateGKENamespace", reflect.TypeOf((*MockGCPServiceAccountManager)(nil).AnnotateGKENamespace), ctx, namespaceName)
}

// CreateAndConnectGSA mocks base method.
func (m *MockGCPServiceAccountManager) CreateAndConnectGSA(ctx context.Context, namespaceName, ksaName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndConnectGSA", ctx, namespaceName, ksaName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAndConnectGSA indicates an expected call of CreateAndConnectGSA.
func (mr *MockGCPServiceAccountManagerMockRecorder) CreateAndConnectGSA(ctx, namespaceName, ksaName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndConnectGSA", reflect.TypeOf((*MockGCPServiceAccountManager)(nil).CreateAndConnectGSA), ctx, namespaceName, ksaName)
}

// DeleteGSA mocks base method.
func (m *MockGCPServiceAccountManager) DeleteGSA(ctx context.Context, namespaceName, ksaName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGSA", ctx, namespaceName, ksaName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGSA indicates an expected call of DeleteGSA.
func (mr *MockGCPServiceAccountManagerMockRecorder) DeleteGSA(ctx, namespaceName, ksaName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGSA", reflect.TypeOf((*MockGCPServiceAccountManager)(nil).DeleteGSA), ctx, namespaceName, ksaName)
}

// GetGSAFullName mocks base method.
func (m *MockGCPServiceAccountManager) GetGSAFullName(namespace, name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGSAFullName", namespace, name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGSAFullName indicates an expected call of GetGSAFullName.
func (mr *MockGCPServiceAccountManagerMockRecorder) GetGSAFullName(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGSAFullName", reflect.TypeOf((*MockGCPServiceAccountManager)(nil).GetGSAFullName), namespace, name)
}
