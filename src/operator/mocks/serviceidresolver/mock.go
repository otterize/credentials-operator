// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/otterize/spire-integration-operator/src/controllers/secrets/types (interfaces: ServiceIdResolver)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	serviceidresolver "github.com/otterize/intents-operator/src/shared/serviceidresolver"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockServiceIdResolver is a mock of ServiceIdResolver interface.
type MockServiceIdResolver struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIdResolverMockRecorder
}

// MockServiceIdResolverMockRecorder is the mock recorder for MockServiceIdResolver.
type MockServiceIdResolverMockRecorder struct {
	mock *MockServiceIdResolver
}

// NewMockServiceIdResolver creates a new mock instance.
func NewMockServiceIdResolver(ctrl *gomock.Controller) *MockServiceIdResolver {
	mock := &MockServiceIdResolver{ctrl: ctrl}
	mock.recorder = &MockServiceIdResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceIdResolver) EXPECT() *MockServiceIdResolverMockRecorder {
	return m.recorder
}

// GetOwnerObject mocks base method.
func (m *MockServiceIdResolver) GetOwnerObject(arg0 context.Context, arg1 *v1.Pod) (client.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerObject", arg0, arg1)
	ret0, _ := ret[0].(client.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerObject indicates an expected call of GetOwnerObject.
func (mr *MockServiceIdResolverMockRecorder) GetOwnerObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerObject", reflect.TypeOf((*MockServiceIdResolver)(nil).GetOwnerObject), arg0, arg1)
}

// ResolvePodToServiceIdentity mocks base method.
func (m *MockServiceIdResolver) ResolvePodToServiceIdentity(arg0 context.Context, arg1 *v1.Pod) (serviceidresolver.ServiceIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolvePodToServiceIdentity", arg0, arg1)
	ret0, _ := ret[0].(serviceidresolver.ServiceIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolvePodToServiceIdentity indicates an expected call of ResolvePodToServiceIdentity.
func (mr *MockServiceIdResolverMockRecorder) ResolvePodToServiceIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePodToServiceIdentity", reflect.TypeOf((*MockServiceIdResolver)(nil).ResolvePodToServiceIdentity), arg0, arg1)
}
