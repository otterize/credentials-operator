// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_spireclient is a generated GoMock package.
package mock_spireclient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	spiffeid "github.com/spiffe/go-spiffe/v2/spiffeid"
	agentv1 "github.com/spiffe/spire-api-sdk/proto/spire/api/server/agent/v1"
	bundlev1 "github.com/spiffe/spire-api-sdk/proto/spire/api/server/bundle/v1"
	entryv1 "github.com/spiffe/spire-api-sdk/proto/spire/api/server/entry/v1"
	svidv1 "github.com/spiffe/spire-api-sdk/proto/spire/api/server/svid/v1"
	trustdomain "github.com/spiffe/spire-api-sdk/proto/spire/api/server/trustdomain/v1"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
)

// MockServerClient is a mock of ServerClient interface.
type MockServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerClientMockRecorder
}

// MockServerClientMockRecorder is the mock recorder for MockServerClient.
type MockServerClientMockRecorder struct {
	mock *MockServerClient
}

// NewMockServerClient creates a new mock instance.
func NewMockServerClient(ctrl *gomock.Controller) *MockServerClient {
	mock := &MockServerClient{ctrl: ctrl}
	mock.recorder = &MockServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerClient) EXPECT() *MockServerClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockServerClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockServerClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServerClient)(nil).Close))
}

// GetSpiffeID mocks base method.
func (m *MockServerClient) GetSpiffeID() spiffeid.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiffeID")
	ret0, _ := ret[0].(spiffeid.ID)
	return ret0
}

// GetSpiffeID indicates an expected call of GetSpiffeID.
func (mr *MockServerClientMockRecorder) GetSpiffeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiffeID", reflect.TypeOf((*MockServerClient)(nil).GetSpiffeID))
}

// NewAgentClient mocks base method.
func (m *MockServerClient) NewAgentClient() agentv1.AgentClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAgentClient")
	ret0, _ := ret[0].(agentv1.AgentClient)
	return ret0
}

// NewAgentClient indicates an expected call of NewAgentClient.
func (mr *MockServerClientMockRecorder) NewAgentClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAgentClient", reflect.TypeOf((*MockServerClient)(nil).NewAgentClient))
}

// NewBundleClient mocks base method.
func (m *MockServerClient) NewBundleClient() bundlev1.BundleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBundleClient")
	ret0, _ := ret[0].(bundlev1.BundleClient)
	return ret0
}

// NewBundleClient indicates an expected call of NewBundleClient.
func (mr *MockServerClientMockRecorder) NewBundleClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBundleClient", reflect.TypeOf((*MockServerClient)(nil).NewBundleClient))
}

// NewEntryClient mocks base method.
func (m *MockServerClient) NewEntryClient() entryv1.EntryClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEntryClient")
	ret0, _ := ret[0].(entryv1.EntryClient)
	return ret0
}

// NewEntryClient indicates an expected call of NewEntryClient.
func (mr *MockServerClientMockRecorder) NewEntryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEntryClient", reflect.TypeOf((*MockServerClient)(nil).NewEntryClient))
}

// NewHealthClient mocks base method.
func (m *MockServerClient) NewHealthClient() grpc_health_v1.HealthClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHealthClient")
	ret0, _ := ret[0].(grpc_health_v1.HealthClient)
	return ret0
}

// NewHealthClient indicates an expected call of NewHealthClient.
func (mr *MockServerClientMockRecorder) NewHealthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHealthClient", reflect.TypeOf((*MockServerClient)(nil).NewHealthClient))
}

// NewSVIDClient mocks base method.
func (m *MockServerClient) NewSVIDClient() svidv1.SVIDClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSVIDClient")
	ret0, _ := ret[0].(svidv1.SVIDClient)
	return ret0
}

// NewSVIDClient indicates an expected call of NewSVIDClient.
func (mr *MockServerClientMockRecorder) NewSVIDClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSVIDClient", reflect.TypeOf((*MockServerClient)(nil).NewSVIDClient))
}

// NewTrustDomainClient mocks base method.
func (m *MockServerClient) NewTrustDomainClient() trustdomain.TrustDomainClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTrustDomainClient")
	ret0, _ := ret[0].(trustdomain.TrustDomainClient)
	return ret0
}

// NewTrustDomainClient indicates an expected call of NewTrustDomainClient.
func (mr *MockServerClientMockRecorder) NewTrustDomainClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTrustDomainClient", reflect.TypeOf((*MockServerClient)(nil).NewTrustDomainClient))
}
