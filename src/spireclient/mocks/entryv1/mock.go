// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire-api-sdk/proto/spire/api/server/entry/v1 (interfaces: EntryClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entryv1 "github.com/spiffe/spire-api-sdk/proto/spire/api/server/entry/v1"
	types "github.com/spiffe/spire-api-sdk/proto/spire/api/types"
	grpc "google.golang.org/grpc"
)

// MockEntryClient is a mock of EntryClient interface.
type MockEntryClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntryClientMockRecorder
}

// MockEntryClientMockRecorder is the mock recorder for MockEntryClient.
type MockEntryClientMockRecorder struct {
	mock *MockEntryClient
}

// NewMockEntryClient creates a new mock instance.
func NewMockEntryClient(ctrl *gomock.Controller) *MockEntryClient {
	mock := &MockEntryClient{ctrl: ctrl}
	mock.recorder = &MockEntryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryClient) EXPECT() *MockEntryClientMockRecorder {
	return m.recorder
}

// BatchCreateEntry mocks base method.
func (m *MockEntryClient) BatchCreateEntry(arg0 context.Context, arg1 *entryv1.BatchCreateEntryRequest, arg2 ...grpc.CallOption) (*entryv1.BatchCreateEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateEntry", varargs...)
	ret0, _ := ret[0].(*entryv1.BatchCreateEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateEntry indicates an expected call of BatchCreateEntry.
func (mr *MockEntryClientMockRecorder) BatchCreateEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateEntry", reflect.TypeOf((*MockEntryClient)(nil).BatchCreateEntry), varargs...)
}

// BatchDeleteEntry mocks base method.
func (m *MockEntryClient) BatchDeleteEntry(arg0 context.Context, arg1 *entryv1.BatchDeleteEntryRequest, arg2 ...grpc.CallOption) (*entryv1.BatchDeleteEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteEntry", varargs...)
	ret0, _ := ret[0].(*entryv1.BatchDeleteEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteEntry indicates an expected call of BatchDeleteEntry.
func (mr *MockEntryClientMockRecorder) BatchDeleteEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteEntry", reflect.TypeOf((*MockEntryClient)(nil).BatchDeleteEntry), varargs...)
}

// BatchUpdateEntry mocks base method.
func (m *MockEntryClient) BatchUpdateEntry(arg0 context.Context, arg1 *entryv1.BatchUpdateEntryRequest, arg2 ...grpc.CallOption) (*entryv1.BatchUpdateEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateEntry", varargs...)
	ret0, _ := ret[0].(*entryv1.BatchUpdateEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateEntry indicates an expected call of BatchUpdateEntry.
func (mr *MockEntryClientMockRecorder) BatchUpdateEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateEntry", reflect.TypeOf((*MockEntryClient)(nil).BatchUpdateEntry), varargs...)
}

// CountEntries mocks base method.
func (m *MockEntryClient) CountEntries(arg0 context.Context, arg1 *entryv1.CountEntriesRequest, arg2 ...grpc.CallOption) (*entryv1.CountEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountEntries", varargs...)
	ret0, _ := ret[0].(*entryv1.CountEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEntries indicates an expected call of CountEntries.
func (mr *MockEntryClientMockRecorder) CountEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEntries", reflect.TypeOf((*MockEntryClient)(nil).CountEntries), varargs...)
}

// GetAuthorizedEntries mocks base method.
func (m *MockEntryClient) GetAuthorizedEntries(arg0 context.Context, arg1 *entryv1.GetAuthorizedEntriesRequest, arg2 ...grpc.CallOption) (*entryv1.GetAuthorizedEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizedEntries", varargs...)
	ret0, _ := ret[0].(*entryv1.GetAuthorizedEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizedEntries indicates an expected call of GetAuthorizedEntries.
func (mr *MockEntryClientMockRecorder) GetAuthorizedEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizedEntries", reflect.TypeOf((*MockEntryClient)(nil).GetAuthorizedEntries), varargs...)
}

// GetEntry mocks base method.
func (m *MockEntryClient) GetEntry(arg0 context.Context, arg1 *entryv1.GetEntryRequest, arg2 ...grpc.CallOption) (*types.Entry, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntry", varargs...)
	ret0, _ := ret[0].(*types.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockEntryClientMockRecorder) GetEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockEntryClient)(nil).GetEntry), varargs...)
}

// ListEntries mocks base method.
func (m *MockEntryClient) ListEntries(arg0 context.Context, arg1 *entryv1.ListEntriesRequest, arg2 ...grpc.CallOption) (*entryv1.ListEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntries", varargs...)
	ret0, _ := ret[0].(*entryv1.ListEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockEntryClientMockRecorder) ListEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockEntryClient)(nil).ListEntries), varargs...)
}
