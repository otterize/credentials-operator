// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire-api-sdk/proto/spire/api/server/svid/v1 (interfaces: SVIDClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	svidv1 "github.com/spiffe/spire-api-sdk/proto/spire/api/server/svid/v1"
	grpc "google.golang.org/grpc"
)

// MockSVIDClient is a mock of SVIDClient interface.
type MockSVIDClient struct {
	ctrl     *gomock.Controller
	recorder *MockSVIDClientMockRecorder
}

// MockSVIDClientMockRecorder is the mock recorder for MockSVIDClient.
type MockSVIDClientMockRecorder struct {
	mock *MockSVIDClient
}

// NewMockSVIDClient creates a new mock instance.
func NewMockSVIDClient(ctrl *gomock.Controller) *MockSVIDClient {
	mock := &MockSVIDClient{ctrl: ctrl}
	mock.recorder = &MockSVIDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSVIDClient) EXPECT() *MockSVIDClientMockRecorder {
	return m.recorder
}

// BatchNewX509SVID mocks base method.
func (m *MockSVIDClient) BatchNewX509SVID(arg0 context.Context, arg1 *svidv1.BatchNewX509SVIDRequest, arg2 ...grpc.CallOption) (*svidv1.BatchNewX509SVIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchNewX509SVID", varargs...)
	ret0, _ := ret[0].(*svidv1.BatchNewX509SVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchNewX509SVID indicates an expected call of BatchNewX509SVID.
func (mr *MockSVIDClientMockRecorder) BatchNewX509SVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchNewX509SVID", reflect.TypeOf((*MockSVIDClient)(nil).BatchNewX509SVID), varargs...)
}

// MintJWTSVID mocks base method.
func (m *MockSVIDClient) MintJWTSVID(arg0 context.Context, arg1 *svidv1.MintJWTSVIDRequest, arg2 ...grpc.CallOption) (*svidv1.MintJWTSVIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MintJWTSVID", varargs...)
	ret0, _ := ret[0].(*svidv1.MintJWTSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintJWTSVID indicates an expected call of MintJWTSVID.
func (mr *MockSVIDClientMockRecorder) MintJWTSVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintJWTSVID", reflect.TypeOf((*MockSVIDClient)(nil).MintJWTSVID), varargs...)
}

// MintX509SVID mocks base method.
func (m *MockSVIDClient) MintX509SVID(arg0 context.Context, arg1 *svidv1.MintX509SVIDRequest, arg2 ...grpc.CallOption) (*svidv1.MintX509SVIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MintX509SVID", varargs...)
	ret0, _ := ret[0].(*svidv1.MintX509SVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintX509SVID indicates an expected call of MintX509SVID.
func (mr *MockSVIDClientMockRecorder) MintX509SVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintX509SVID", reflect.TypeOf((*MockSVIDClient)(nil).MintX509SVID), varargs...)
}

// NewDownstreamX509CA mocks base method.
func (m *MockSVIDClient) NewDownstreamX509CA(arg0 context.Context, arg1 *svidv1.NewDownstreamX509CARequest, arg2 ...grpc.CallOption) (*svidv1.NewDownstreamX509CAResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDownstreamX509CA", varargs...)
	ret0, _ := ret[0].(*svidv1.NewDownstreamX509CAResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDownstreamX509CA indicates an expected call of NewDownstreamX509CA.
func (mr *MockSVIDClientMockRecorder) NewDownstreamX509CA(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDownstreamX509CA", reflect.TypeOf((*MockSVIDClient)(nil).NewDownstreamX509CA), varargs...)
}

// NewJWTSVID mocks base method.
func (m *MockSVIDClient) NewJWTSVID(arg0 context.Context, arg1 *svidv1.NewJWTSVIDRequest, arg2 ...grpc.CallOption) (*svidv1.NewJWTSVIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewJWTSVID", varargs...)
	ret0, _ := ret[0].(*svidv1.NewJWTSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJWTSVID indicates an expected call of NewJWTSVID.
func (mr *MockSVIDClientMockRecorder) NewJWTSVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJWTSVID", reflect.TypeOf((*MockSVIDClient)(nil).NewJWTSVID), varargs...)
}
